[project]
name = "sahi"
version = "0.11.32"
readme = "README.md"
description = "A vision library for performing sliced inference on large images/small objects"
requires-python = ">=3.8"
license = "MIT"
license-files = ["./LICENSE"]
dependencies = [
  "opencv-python<=4.11.0.86",
  "shapely>=2.0.0",
  "tqdm>=4.48.2",
  "pybboxes==0.1.6",
  "pillow>=8.2.0",
  "pyyaml",
  "fire",
  "terminaltables",
  "requests",
  "click",
]

classifiers = [
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
maintainers = [
  { name = "Fatih Cagatay Akyon (@fcakyon)" },
]

[project.urls]
"Homepage" = "https://github.com/obss/sahi"
"Source" = "https://github.com/obss/sahi"
"Documentation" = "https://github.com/obss/sahi/tree/main/docs"
"Bug Reports" = "https://github.com/obss/sahi/discussions/categories/q-a"
"Changelog" = "https://github.com/obss/sahi/releases"

[project.scripts]
sahi = "sahi.cli:app"

[dependency-groups]
dev = [
    "pytest>=7.2.2,<9.0.0",
    "tox>=4.11.4",
    "notebook>=6.5.3,<8.0.0",
    "ipywidgets>=8.1.1",
    "jupytext>=1.16.1",
    "nbconvert>=7.14.2",
    "docutils!=0.21",
    "pytest-xdist[psutil]>=3.0",
    "ruff",
    "jupyterlab>=3.0.14",
]
docs = [
    "mkdocs-material[imaging]>=9.6.15,<=10.0.0",
    "mkdocstrings>=0.25.2,<0.30.0",
    "mkdocstrings-python>=1.10.9",
    "mike>=2.0.0",
    "mkdocs-jupyter>=0.24.3",
    "mkdocs-git-committers-plugin-2>=2.4.1; python_version >= '3.9' and python_version < '4'",
    "mkdocs-git-revision-date-localized-plugin>=1.2.4",
]
build = [
    "twine>=5.1.1,<7.0.0",
    "wheel>=0.40,<0.46",
    "build>=0.10,<1.3"
]

[project.optional-dependencies]
mmdet = [
  # MMDetection dependencies - only for Python 3.11 and not on macOS ARM64
  "mmengine;python_version=='3.11' and (platform_system!='Darwin' or platform_machine!='arm64')",
  "mmcv==2.1.0;python_version=='3.11' and (platform_system!='Darwin' or platform_machine!='arm64')",
  "mmdet==3.3.0;python_version=='3.11' and (platform_system!='Darwin' or platform_machine!='arm64')",
  # numpy 2 is not compatible with torch 2.1.2
  "numpy<2.0;python_version=='3.11'",
]
ci = [
  # max supported pytorch version for python 3.8 is 2.4.1
  # CPU versions for Linux/Windows CI
  "torch==2.7.0+cpu;python_version>='3.9' and platform_system!='Darwin'",
  "torch==2.4.1+cpu;python_version=='3.8' and platform_system!='Darwin'",
  "torchvision==0.22.0+cpu;python_version>='3.9' and platform_system!='Darwin'",
  "torchvision==0.19.1+cpu;python_version=='3.8' and platform_system!='Darwin'",
  # Regular versions for macOS
  "torch==2.7.0;python_version>='3.9' and platform_system=='Darwin'",
  "torch==2.4.1;python_version=='3.8' and platform_system=='Darwin'",
  "torchvision==0.22.0;python_version>='3.9' and platform_system=='Darwin'",
  "torchvision==0.19.1;python_version=='3.8' and platform_system=='Darwin'",
  # transformers is supported for python>=3.9
  "transformers>=4.49.0;python_version>='3.9'",
  # test roboflow only for python>=3.12
  "inference>=0.51.5;python_version>='3.12'",
  "rfdetr>=1.1.0;python_version>='3.12'",
  # ultralytics onnx is supported for python>=3.10
  "onnx;python_version>='3.10'",
  "onnxruntime;python_version>='3.10'",
  # These are available for all python versions
  "pycocotools>=2.0.7",
  "ultralytics>=8.3.161",
  "scikit-image",
  "fiftyone",
]

[tool.uv]
find-links = [
  "https://download.openmmlab.com/mmcv/dist/cpu/torch2.1.0/index.html",
]
override-dependencies = ["pillow>=8.2.0"]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.uv.sources]
torch = [{ index = "pytorch-cpu" }]
torchvision = [{ index = "pytorch-cpu" }]

[tool.hatch.version]
path = "sahi/__init__.py"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
exclude = ["**/__init__.py", ".git", "__pycache__", "*.ipynb"]

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E501"]  # line too long

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["--import-mode=importlib", "--no-header"]
pythonpath = ["."]

[tool.typos.default]
extend-ignore-identifiers-re = ["fo"]
