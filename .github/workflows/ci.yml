name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Ubuntu cache
        uses: actions/cache@v1
        if: matrix.operating-system == 'ubuntu-latest'
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/setup.py')}}
          restore-keys: ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Restore MacOS cache
        uses: actions/cache@v1
        if: matrix.operating-system == 'macos-latest'
        with:
          path: ~/Library/Caches/pip
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/setup.py')}}
          restore-keys: ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Restore Windows cache
        uses: actions/cache@v1
        if: matrix.operating-system == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/setup.py')}}
          restore-keys: ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Lint with flake8, black and isort
        run: |
          pip install -e .[dev]
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black . --check --config pyproject.toml
          isort -c .
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Install core dependencies
        run: >
          pip install -r requirements.txt

      - name: Install PyTorch on Linux and Windows
        if: >
          matrix.operating-system == 'ubuntu-latest' ||
          matrix.operating-system == 'windows-latest'
        run: >
          pip install torch==1.10.0+cpu torchvision==0.11.1+cpu
          -f https://download.pytorch.org/whl/torch_stable.html

      - name: Install PyTorch on MacOS
        if: matrix.operating-system == 'macos-latest'
        run: pip install torch==1.10.2 torchvision==0.11.3

      - name: Install MMDetection(2.21.0) with MMCV(1.4.4)
        run: >
          pip install mmcv-full==1.4.4 -f https://download.openmmlab.com/mmcv/dist/cpu/torch1.10.0/index.html
          pip install mmdet==2.21.0

      - name: Install YOLOv5(6.0.6) and Norfair(0.3.1)
        run: >
          pip install yolov5==6.0.6 norfair==0.3.1

      - name: Install Detectron2(0.6)
        run: >
          python -m pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cpu/torch1.10/index.html
          
      - name: Unittest for SAHI+YOLOV5/MMDET/Detectron2 on all platforms
        run: |
          python -m unittest

      - name: Install pycocotools(2.0.3)
        run: >
          pip install pycocotools==2.0.3

      - name: Install SAHI package from local setup.py
        run: >
          pip install -e .

      - name: Test SAHI CLI
        run: |
          # help
          sahi --help
          # predict mmdet
          sahi predict --source tests/data/ --model_path tests/data/models/mmdet_yolox/yolox_tiny_8x8_300e_coco_20211124_171234-b4047906.pth --model_config_path tests/data/models/mmdet_retinanet/retinanet_r50_fpn_1x_coco.py --image_size 320
          sahi predict --source tests/data/coco_utils/terrain1.jpg --export_visual --export_pickle --export_crop --model_path tests/data/models/mmdet_yolox/yolox_tiny_8x8_300e_coco_20211124_171234-b4047906.pth --model_config_path tests/data/models/mmdet_yolox/yolox_tiny_8x8_300e_coco.py --image_size 320
          sahi predict --source tests/data/coco_utils/ --dataset_json_path tests/data/coco_utils/combined_coco.json --model_path tests/data/models/mmdet_yolox/yolox_tiny_8x8_300e_coco_20211124_171234-b4047906.pth --model_config_path tests/data/models/mmdet_yolox/yolox_tiny_8x8_300e_coco.py --image_size 320
          # predict yolov5
          sahi predict --no_sliced_prediction --model_type yolov5 --source tests/data/coco_utils/terrain1.jpg --model_path tests/data/models/yolov5/yolov5s6.pt --image_size 320
          sahi predict --model_type yolov5 --source tests/data/ --model_path tests/data/models/yolov5/yolov5s6.pt --image_size 320
          sahi predict --model_type yolov5 --source tests/data/coco_utils/terrain1.jpg --export_visual --export_pickle --export_crop --model_path tests/data/models/yolov5/yolov5s6.pt --image_size 320
          sahi predict --model_type yolov5 --source tests/data/coco_utils/ --dataset_json_path tests/data/coco_utils/combined_coco.json --model_path tests/data/models/yolov5/yolov5s6.pt --image_size 320
          # coco yolov5
          sahi coco yolov5 --image_dir tests/data/coco_utils/ --dataset_json_path tests/data/coco_utils/combined_coco.json --train_split 0.9
          # coco evaluate
          sahi coco evaluate --dataset_json_path tests/data/coco_evaluate/dataset.json --result_json_path tests/data/coco_evaluate/result.json
          # coco analyse
          sahi coco analyse --dataset_json_path tests/data/coco_evaluate/dataset.json --result_json_path tests/data/coco_evaluate/result.json --out_dir tests/data/coco_evaluate/
